/// #sort
/// #repeattable
goog.provide('#namespace.row.#table#pascal');
goog.provide('#namespace.row.#table#pascalDbType');
goog.provide('#namespace.row.#table#pascalType');
goog.provide('#namespace.schema.#table#pascal');
/// #repeattableend
goog.provide('#namespace.schema.Database');
/// #sortend

goog.require('lf.Row');
goog.require('lf.Type');
goog.require('lf.schema.BaseColumn');
goog.require('lf.schema.Constraint');
goog.require('lf.schema.Database');
goog.require('lf.schema.Index');
goog.require('lf.schema.Table');



/**
 * @implements {lf.schema.Database}
 * @constructor
 */
#namespace.schema.Database = function() {
  /// #repeattable
  /** @private {!#namespace.schema.#table#pascal} */
  this.#table#camel_ = new #namespace.schema.#table#pascal();

  /// #repeattableend
};


/** @override */
#namespace.schema.Database.prototype.getName = function() {
  return '#dbname';
};


/** @override */
#namespace.schema.Database.prototype.getVersion = function() {
  return #dbversion;
};


/** @override */
#namespace.schema.Database.prototype.getTables = function() {
  return [
#dbtablelist
  ];
};
/// #repeattable


/** @return {!#namespace.schema.#table#pascal} */
#namespace.schema.Database.prototype.get#table#pascal = function() {
  return this.#table#camel_;
};
/// #repeattableend
/// #repeattable



/**
 * @implements {lf.schema.Table.<!#namespace.row.#table#pascalType,
 *     !#namespace.row.#table#pascalDbType>}
 * @constructor
 */
#namespace.schema.#table#pascal = function() {
  /** @private {!Array.<!lf.schema.Index>} */
  this.indices_;

  /** @private {!Array.<!lf.schema.Column>} */
  this.columns_ = [];

  /// #repeatcolumn
  /** @type {!lf.schema.BaseColumn.<#columnjstype>} */
  this.#column#camel = new lf.schema.BaseColumn(
      this, '#column#camel', #columnuniqueness, #columnenumtype);
  this.columns_.push(this.#column#camel);

  /// #repeatcolumnend
};


/** @override */
#namespace.schema.#table#pascal.prototype.getName = function() {
  return '#tablename';
};


/** @override */
#namespace.schema.#table#pascal.prototype.createRow = function(opt_value) {
  return new #namespace.row.#table#pascal(lf.Row.getNextId(), opt_value);
};


/** @override */
#namespace.schema.#table#pascal.prototype.deserializeRow = function(dbRecord) {
#deserializerow #namespace.row.#table#pascal dbRecord
};


/** @override */
#namespace.schema.#table#pascal.prototype.getIndices = function() {
  if (!this.indices_) {
    this.indices_ = [
#tableindices
    ];
  }
  return this.indices_;
};


/** @override */
#namespace.schema.#table#pascal.prototype.getColumns = function() {
  return this.columns_;
};


/** @override */
#namespace.schema.#table#pascal.prototype.getConstraint = function() {
#tableconstraint
};



/**
 * @export
 * @constructor
 * @struct
 * @final
 */
#namespace.row.#table#pascalType = function() {
#tablecolumntypes
};



/**
 * @export
 * @constructor
 * @struct
 * @final
 */
#namespace.row.#table#pascalDbType = function() {
#tablecolumndbtypes
};



/**
 * Constructs a new #table#pascal row.
 * @constructor
 * @extends {lf.Row.<!#namespace.row.#table#pascalType,
 *     !#namespace.row.#table#pascalDbType>}
 *
 * @param {number} rowId The row ID.
 * @param {!#namespace.row.#table#pascalType=} opt_payload
 */
#namespace.row.#table#pascal = function(rowId, opt_payload) {
  #namespace.row.#table#pascal.base(this, 'constructor', rowId, opt_payload);
};
goog.inherits(#namespace.row.#table#pascal, lf.Row);


/** @override */
#namespace.row.#table#pascal.prototype.defaultPayload = function() {
  var payload = new #namespace.row.#table#pascalType();
#getdefaultpayload payload
  return payload;
};


/** @override */
#namespace.row.#table#pascal.prototype.toDbPayload = function() {
  var payload = new #namespace.row.#table#pascalDbType();
#todbpayload payload
  return payload;
};


/** @override */
#namespace.row.#table#pascal.prototype.keyOfIndex = function(indexName) {
#keyofindex indexName
};
#rowpropgetset #namespace.row.#table#pascal.prototype
/// #repeattableend
